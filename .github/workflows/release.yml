name: Create Release

on:
  push:
    tags:
      - "*"

jobs:
  lint:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  package_executable:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            file_name: Agile_Forecasting
          - os: macos-latest
            file_name: Agile_Forecasting
          - os: windows-latest
            file_name: Agile_Forecasting.exe
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    needs: lint
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
      - name: Create Executable
        run: |
          pyinstaller --clean --distpath="dist/${{ matrix.os }}" --name="${{ matrix.file_name }}" --onefile ./src/app.py
      - name: Upload executable
        uses: actions/upload-artifact@v2
        with:
          name: Release Candidate Executable for ${{ matrix.os }}
          path: "dist/${{ matrix.os}}/${{ matrix.file_name }}"

  release:
    runs-on: ubuntu-latest
    needs: package_executable
    steps:
      - name: Use Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"
      - name: Install changelog generator
        run: |
          gem install github_changelog_generator
      - name: Checkout for changelog generation
        uses: actions/checkout@v2
      - name: Generate changelog
        env:
          CHANGELOG_GITHUB_TOKEN: ${{ github.token }}
        run: |
          IFS='/' read -ra REPO_PARTS <<< "$GITHUB_REPOSITORY"
          github_changelog_generator -u $REPO_PARTS[0] -p $REPO_PARTS[1]
      - name: Create GitHub release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref }}
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Download artifacts from packaging workflow
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ github.token }}
          workflow: on-commit-to-main.yml
          workflow_conclusion: success
          commit: ${{ github.ref }}
          branch: main
          path: dist
      - name: Upload Windows artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/windows-latest/Agile_Forecasting.exe
          asset_name: Agile_Forecasting_for_Windows.exe
          asset_content_type: application/octet-stream
      - name: Upload Linux artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/ubuntu-latest/Agile_Forecasting
          asset_name: Agile_Forecasting_for_Linux
          asset_content_type: application/octet-stream
      - name: Upload MacOS artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/macos-latest/Agile_Forecasting
          asset_name: Agile_Forecasting_for_MacOS
          asset_content_type: application/octet-stream
