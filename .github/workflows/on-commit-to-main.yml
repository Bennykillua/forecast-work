name: Create Development Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  package_executable:
    name: Create executable for application
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            file_name: Agile-Forecasting
          - os: macos-latest
            file_name: Agile-Forecasting
          - os: windows-latest
            file_name: Agile-Forecasting.exe
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    needs: lint
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install pyinstaller
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          pip install -r requirements.txt
      - name: Create Executable
        run: |
          pyinstaller --clean --distpath="dist/${{ matrix.os }}" --name="${{ matrix.file_name }}" --onefile ./src/app.py
      - name: Upload executable
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}_${{ matrix.file_name }}
          path: "dist/${{ matrix.os}}/${{ matrix.file_name }}"
